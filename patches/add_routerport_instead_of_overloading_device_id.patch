diff --git a/neutron/db/l3_db.py b/neutron/db/l3_db.py
index 582a419..97c24f8 100644
--- a/neutron/db/l3_db.py
+++ b/neutron/db/l3_db.py
@@ -180,16 +180,11 @@ class L3_NAT_db_mixin(l3.RouterPluginBase):
 
     def update_router(self, context, id, router):
         r = router['router']
-<<<<<<< HEAD
         has_gw_info = False
         if EXTERNAL_GW_INFO in r:
             has_gw_info = True
             gw_info = r[EXTERNAL_GW_INFO]
             del r[EXTERNAL_GW_INFO]
-=======
-        has_gw_info = EXTERNAL_GW_INFO in r
-        gw_info = r.pop(EXTERNAL_GW_INFO, None)
->>>>>>> ae6e7e5... add routerport instead of overloading device_id
         with context.session.begin(subtransactions=True):
             router_db = self._get_router(context, id)
             if gw_info is not None:
diff --git a/neutron/db/models_v2.py b/neutron/db/models_v2.py
index 84790fd..a2f1e03 100644
--- a/neutron/db/models_v2.py
+++ b/neutron/db/models_v2.py
@@ -191,15 +191,11 @@ class Subnet(model_base.BASEV2, HasId, HasTenant):
     ipv6_address_mode = sa.Column(sa.Enum(constants.IPV6_SLAAC,
                                   constants.DHCPV6_STATEFUL,
                                   constants.DHCPV6_STATELESS,
-<<<<<<< HEAD
                                   name='ipv6_modes'), nullable=True)
-=======
-                                  name='ipv6_address_modes'), nullable=True)
     ipallocations = orm.relationship(IPAllocation,
                                      backref='subnet',
                                      lazy='dynamic',
                                      cascade='delete')
->>>>>>> ae6e7e5... add routerport instead of overloading device_id
 
 
 class Network(model_base.BASEV2, HasId, HasTenant):
