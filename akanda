# -*- mode: shell-script -*-
# lib/akanda
# functions specific to akanda

# Set up default directories
AKANDA_NOVA_DIR=$DEST/akanda-nova
AKANDA_NOVA_REPO=${AKANDA_NOVA_REPO:-git@github.com:dreamhost/akanda-nova.git}
AKANDA_NOVA_BRANCH=${AKANDA_NOVA_BRANCH:-master}

AKANDA_NEUTRON_DIR=$DEST/akanda-quantum
AKANDA_NEUTRON_REPO=${AKANDA_NEUTRON_REPO:-git@github.com:dreamhost/akanda-quantum.git}
AKANDA_NEUTRON_BRANCH=${AKANDA_NEUTRON_BRANCH:-master}

AKANDA_RUG_DIR=$DEST/akanda-rug
AKANDA_RUG_REPO=${AKANDA_RUG_REPO:-git@github.com:dreamhost/akanda-rug.git}
AKANDA_RUG_BRANCH=${AKANDA_RUG_BRANCH:-master}

AKANDA_CONF_DIR=/etc/akanda-rug
AKANDA_RUG_CONF=$AKANDA_CONF_DIR/rug.ini

AKANDA_RAW_FILE=${AKANDA_IMAGE_FILE:-/vagrant/data/akanda.qcow2}

AKANDA_IMAGE_FILE=${AKANDA_IMAGE_FILE:-/vagrant/data/akanda.qcow2}
AKANDA_IMAGE_DEFAULT=${AKANDA_IMAGE_DEFAULT:-https://image.example.com/appliance/LATEST}

AKANDA_APPLIANCE_FILE=$AKANDA_IMAGE_FILE
ROUTER_INSTANCE_FLAVOR=2
AKANDA_CONTAINER_FORMAT='qcow2'
PUBLIC_INTERFACE_DEFAULT='eth0'

function configure_akanda() {
    if [[ ! -d $AKANDA_CONF_DIR ]]; then
        sudo mkdir -p $AKANDA_CONF_DIR
    fi
    sudo chown $STACK_USER $AKANDA_CONF_DIR

    cp $AKANDA_RUG_DIR/etc/rug.ini $AKANDA_RUG_CONF
    iniset $AKANDA_RUG_CONF DEFAULT verbose True
    iniset $AKANDA_RUG_CONF DEFAULT admin_user $Q_ADMIN_USERNAME
    iniset $AKANDA_RUG_CONF DEFAULT admin_password $SERVICE_PASSWORD
    iniset $AKANDA_RUG_CONF DEFAULT rabbit_host $RABBIT_HOST
    iniset $AKANDA_RUG_CONF DEFAULT rabbit_password $RABBIT_PASSWORD
    iniset $AKANDA_RUG_CONF DEFAULT control_exchange "neutron"
    iniset $AKANDA_RUG_CONF DEFAULT router_instance_flavor $ROUTER_INSTANCE_FLAVOR
    iniset $AKANDA_RUG_CONF DEFAULT boot_timeout "6000"
    iniset $AKANDA_RUG_CONF DEFAULT num_worker_processes "2"
    iniset $AKANDA_RUG_CONF DEFAULT num_worker_threads "2"
    iniset $AKANDA_RUG_CONF DEFAULT reboot_error_threshold "2"
}

function configure_akanda_nova() {
    iniset $NOVA_CONF DEFAULT network_api_class akanda.nova.neutronv2.api.API
    iniset $NOVA_CONF DEFAULT service_neutron_metadata_proxy True
}

function configure_akanda_neutron() {
    iniset $NEUTRON_CONF DEFAULT core_plugin akanda.neutron.plugins.ovs_neutron_plugin.OVSNeutronPluginV2
    iniset $NEUTRON_CONF DEFAULT api_extensions_path $AKANDA_NEUTRON_DIR/akanda/neutron/extensions
}

function install_akanda() {

    # akanda-rug rug-ctl requires the `blessed` package, which is not in OpenStack's global requirements,
    # so an attempt to install akanda-rug with the `setup_develop` function will fail.
    #  
    # In newer versions of devstack, there is a way to disabled this behavior:
    # http://git.openstack.org/cgit/openstack-dev/devstack/commit/functions-common?id=def1534ce06409c4c70d6569ea6314a82897e28b
    #  
    # For now, inject `blessed` into the global requirements so that akanda-rug can install
    echo "blessed" >> /opt/stack/requirements/global-requirements.txt

    git_clone $AKANDA_NEUTRON_REPO $AKANDA_NEUTRON_DIR $AKANDA_NEUTRON_BRANCH
    setup_develop $AKANDA_NEUTRON_DIR

    git_clone $AKANDA_NOVA_REPO $AKANDA_NOVA_DIR $AKANDA_NOVA_BRANCH
    setup_develop $AKANDA_NOVA_DIR

    git_clone $AKANDA_RUG_REPO $AKANDA_RUG_DIR $AKANDA_RUG_BRANCH
    setup_develop $AKANDA_RUG_DIR
}

function _remove_subnets() {
    # We have to modify the output of net-show to allow it to be
    # parsed properly as shell variables, and we run both commands in
    # a subshell to avoid polluting the local namespace.
    (eval $(neutron $auth_args net-show -f shell $1 | sed 's/:/_/g');
        neutron $auth_args subnet-delete $subnets)

}

function pre_start_akanda() {
    typeset auth_args="--os-username $Q_ADMIN_USERNAME --os-password $SERVICE_PASSWORD --os-tenant-name $SERVICE_TENANT_NAME --os-auth-url $OS_AUTH_URL"
    neutron $auth_args net-create public --router:external=True

    # Remove the ipv6 subnet created automatically before adding our own.
    _remove_subnets public

    typeset public_subnet_id=$(neutron $auth_args subnet-create --ip-version 4 public 172.16.77.0/24 | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT external_subnet_id $public_subnet_id
    neutron $auth_args subnet-create --ip-version 6 public fdee:9f85:83be::/48

    # Point neutron-akanda at the subnet to use for floating IPs.  This requires a neutron service restart (later) to take effect.
    iniset $NEUTRON_CONF akanda floatingip_subnet $public_subnet_id

    # setup masq rule for public network
    sudo iptables -t nat -A POSTROUTING -s 172.16.77.0/24 -o $PUBLIC_INTERFACE_DEFAULT -j MASQUERADE

    neutron $auth_args net-show public | grep ' id ' | awk '{ print $4 }'

    typeset public_network_id=$(neutron $auth_args net-show public | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT external_network_id $public_network_id

    neutron $auth_args net-create mgt
    typeset mgt_network_id=$(neutron $auth_args net-show mgt | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT management_network_id $mgt_network_id

    # Remove the ipv6 subnet created automatically before adding our own.
    _remove_subnets mgt

    typeset mgt_subnet_id=$(neutron $auth_args subnet-create mgt fdca:3ba5:a17a:acda::/64 --ip-version=6 | grep ' id ' | awk '{ print $4 }')
    iniset $AKANDA_RUG_CONF DEFAULT management_subnet_id $mgt_subnet_id

    # Remove the private network created by devstack
    neutron $auth_args subnet-delete $PRIVATE_SUBNET_NAME
    neutron $auth_args net-delete $PRIVATE_NETWORK_NAME

    if [ -f $AKANDA_APPLIANCE_FILE ]
    then
        echo "Using existing Akanda image file $AKANDA_APPLIANCE_FILE"
    else
        typeset isodir=$(dirname $AKANDA_APPLIANCE_FILE)
        sudo mkdir -p $isodir
        sudo chown $STACK_USER $isodir
        # Load the credentials from a file outside of the git repo,
        # find the latest IMAGE file name, then download that file.
        if [ ! -f $DEST/.akanda_dho_creds ]
        then
            echo "Did not find $DEST/.akanda_dho_creds" 1>&2
            exit 1
        fi
        echo "Looking for AKANDA-LATEST file"
        source $DEST/.akanda_dho_creds && swift -V 1.0 download akanda-linux -o $DEST/AKANDA-LATEST LATEST
        [ $? -ne 0 ] && exit 1
        echo "Downloading IMAGE file to $AKANDA_APPLIANCE_FILE"
        (source $DEST/.akanda_dho_creds && swift -V 1.0 download -o $AKANDA_APPLIANCE_FILE akanda-linux $(cat $DEST/AKANDA-LATEST)) || exit 1
    fi

    glance $auth_args image-create --name akanda --disk-format $AKANDA_CONTAINER_FORMAT --container-format bare --file $AKANDA_APPLIANCE_FILE
    typeset image_id=$(glance $auth_args image-show akanda | grep ' id ' | awk '{print $4}')
    iniset $AKANDA_RUG_CONF DEFAULT router_image_uuid $image_id

    iniset $AKANDA_RUG_CONF DEFAULT auth_url $OS_AUTH_URL
}

function start_akanda_rug() {
    screen_it ak-rug "cd $AKANDA_RUG_DIR && akanda-rug-service --config-file $AKANDA_RUG_CONF"
    echo '************************************************************'
    echo "Sleeping for a while to make sure the tap device gets set up"
    echo '************************************************************'
    sleep 30
}

function post_start_akanda() {
    echo "Creating demo user network and subnet"
    neutron --os-username demo --os-password $ADMIN_PASSWORD \
        --os-tenant-name demo --os-auth-url $OS_AUTH_URL \
        net-create thenet
    neutron --os-username demo --os-password $ADMIN_PASSWORD \
        --os-tenant-name demo --os-auth-url $OS_AUTH_URL \
        subnet-create thenet 192.168.0.0/24

    # Restart neutron so that `akanda.floatingip_subnet` is properly set
    screen_stop_service q-svc
    start_neutron_service_and_check
}

function stop_akanda_rug() {
    echo "Stopping the rug..."
    screen_stop_service ak-rug
    stop_process ak-rug
}
